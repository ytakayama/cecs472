// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "vector_handler.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
Vector_Ops::Vector::operator>>= (cdrStream &_n) const
{
  x >>= _n;
  y >>= _n;

}

void
Vector_Ops::Vector::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)x <<= _n;
  (::CORBA::Long&)y <<= _n;

}

Vector_Ops_ptr Vector_Ops_Helper::_nil() {
  return ::Vector_Ops::_nil();
}

::CORBA::Boolean Vector_Ops_Helper::is_nil(::Vector_Ops_ptr p) {
  return ::CORBA::is_nil(p);

}

void Vector_Ops_Helper::release(::Vector_Ops_ptr p) {
  ::CORBA::release(p);
}

void Vector_Ops_Helper::marshalObjRef(::Vector_Ops_ptr obj, cdrStream& s) {
  ::Vector_Ops::_marshalObjRef(obj, s);
}

Vector_Ops_ptr Vector_Ops_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Vector_Ops::_unmarshalObjRef(s);
}

void Vector_Ops_Helper::duplicate(::Vector_Ops_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Vector_Ops_ptr
Vector_Ops::_duplicate(::Vector_Ops_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Vector_Ops_ptr
Vector_Ops::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Vector_Ops_ptr
Vector_Ops::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Vector_Ops_ptr
Vector_Ops::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Vector_Ops _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Vector_Ops* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Vector_Ops;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Vector_Ops::_PD_repoId = "IDL:Vector_Ops:1.0";


_objref_Vector_Ops::~_objref_Vector_Ops() {
  
}


_objref_Vector_Ops::_objref_Vector_Ops(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Vector_Ops::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
_objref_Vector_Ops::_ptrToObjRef(const char* id)
{
  if( id == ::Vector_Ops::_PD_repoId )
    return (::Vector_Ops_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Vector_Ops::_PD_repoId) )
    return (::Vector_Ops_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cVector__Ops_mVector_i_cVector__Ops_mVector_i_cVector__Ops_mVector
class _0RL_cd_a0e6f9fdbce8df2e_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a0e6f9fdbce8df2e_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  Vector_Ops::Vector arg_0_;
  const Vector_Ops::Vector* arg_0;
  Vector_Ops::Vector arg_1_;
  const Vector_Ops::Vector* arg_1;
  Vector_Ops::Vector result;
};

void _0RL_cd_a0e6f9fdbce8df2e_00000000::marshalArguments(cdrStream& _n)
{
  (const Vector_Ops::Vector&) *arg_0 >>= _n;
  (const Vector_Ops::Vector&) *arg_1 >>= _n;

}

void _0RL_cd_a0e6f9fdbce8df2e_00000000::unmarshalArguments(cdrStream& _n)
{
  (Vector_Ops::Vector&)arg_0_ <<= _n;
  arg_0 = &arg_0_;
  (Vector_Ops::Vector&)arg_1_ <<= _n;
  arg_1 = &arg_1_;

}

void _0RL_cd_a0e6f9fdbce8df2e_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const Vector_Ops::Vector&) result >>= _n;

}

void _0RL_cd_a0e6f9fdbce8df2e_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (Vector_Ops::Vector&)result <<= _n;

}

const char* const _0RL_cd_a0e6f9fdbce8df2e_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a0e6f9fdbce8df2e_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a0e6f9fdbce8df2e_00000000* tcd = (_0RL_cd_a0e6f9fdbce8df2e_00000000*)cd;
  _impl_Vector_Ops* impl = (_impl_Vector_Ops*) svnt->_ptrToInterface(Vector_Ops::_PD_repoId);
  tcd->result = impl->Add(*tcd->arg_0, *tcd->arg_1);


}

Vector_Ops::Vector _objref_Vector_Ops::Add(const ::Vector_Ops::Vector& a, const ::Vector_Ops::Vector& b)
{
  _0RL_cd_a0e6f9fdbce8df2e_00000000 _call_desc(_0RL_lcfn_a0e6f9fdbce8df2e_10000000, "Add", 4);
  _call_desc.arg_0 = &(::Vector_Ops::Vector&) a;
  _call_desc.arg_1 = &(::Vector_Ops::Vector&) b;

  _invoke(_call_desc);
  return _call_desc.result;


}
_pof_Vector_Ops::~_pof_Vector_Ops() {}


omniObjRef*
_pof_Vector_Ops::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::_objref_Vector_Ops(ior, id);
}


::CORBA::Boolean
_pof_Vector_Ops::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Vector_Ops::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_Vector_Ops _the_pof_Vector__Ops;

_impl_Vector_Ops::~_impl_Vector_Ops() {}


::CORBA::Boolean
_impl_Vector_Ops::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "Add") ) {

    _0RL_cd_a0e6f9fdbce8df2e_00000000 _call_desc(_0RL_lcfn_a0e6f9fdbce8df2e_10000000, "Add", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
_impl_Vector_Ops::_ptrToInterface(const char* id)
{
  if( id == ::Vector_Ops::_PD_repoId )
    return (::_impl_Vector_Ops*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Vector_Ops::_PD_repoId) )
    return (::_impl_Vector_Ops*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
_impl_Vector_Ops::_mostDerivedRepoId()
{
  return ::Vector_Ops::_PD_repoId;
}

POA_Vector_Ops::~POA_Vector_Ops() {}

